/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.plataformax.swingui;

import com.plataformax.configuration.Configuration;
import com.plataformax.x509managers.TestKeyStore;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.SSLContext;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.Invocation;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import org.apache.commons.io.FileUtils;
import org.glassfish.jersey.SslConfigurator;
import org.glassfish.jersey.client.ClientConfig;
import org.glassfish.jersey.media.multipart.FormDataMultiPart;
import org.glassfish.jersey.media.multipart.MultiPartFeature;
import org.glassfish.jersey.media.multipart.file.FileDataBodyPart;

/**
 *
 * @author Mathias
 */
public class PasswordPanel extends javax.swing.JFrame {

    private final int REQUEST_SUCCESSS = 1;
    private static final String SECURITY_DIRECTORY_PATH = ".\\nbproject\\private\\security\\";
    private static final String CA_CERTREQ_ADDRESS = "https://localhost:9998/api/app/csr";
    private static final String CA_DOWNCERT_ADDRESS = "https://localhost:9998/api/app/down";
    private static final String CA_DOWNCACERT_ADDRESS = "https://localhost:9998/api/app/downcacert";
    
    private String username;
    private Configuration config;

    /**
     * Creates new form TelaSenha
     *
     * @throws java.lang.Exception
     */
    public PasswordPanel() throws Exception {
        initComponents();
    }

    public PasswordPanel(String username) throws Exception {
        this.username = username;
        this.config = new Configuration("device", "123456");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        passwordField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        continueButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("INFORME A SENHA DA SUA CHAVE/CHAVEIRO");

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(235, 235, 235));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Essa senha será utilizada para criar a\nsua chave e, a partir de agora, será\nutilizada para proteger o seu \nchaveiro. O chaveiro é o local onde \nficam guardadas todas as suas chaves \nprivadas e certificados correspondentes, \nregistrados para serem utilizados a partir\ndesse dispositivo.\n");
        jScrollPane2.setViewportView(jTextArea1);

        continueButton.setText("Prosseguir");
        continueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueButtonActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Senha:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(continueButton)
                        .addGap(50, 50, 50)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jLabel2)
                .addGap(1, 1, 1)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(continueButton)
                    .addComponent(jButton1))
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed

    }//GEN-LAST:event_passwordFieldActionPerformed

    private void continueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueButtonActionPerformed
        
        //TIRAR ISSO PARA PRODUÇÃO, SÓ ESTÁ AQUI PARA PERMITIR CONEXÃO COM LOCAHOST
        //O TLS COMPARA O CN DO CERTIFICADO COM O HOSTNAME O QUAL ESTÁ SE CONECTANDO
        //COMO O CN DO CERTIFICADO DO SERVIDOR NÃO É 'LOCALHOST'
        //VAI DAR PROBLEMA DE 'MATCHING'
        javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier(
                new javax.net.ssl.HostnameVerifier() {

            @Override
            public boolean verify(String hostname,
                    javax.net.ssl.SSLSession sslSession) {
                return true;
            }
        });
        
        
        String password = passwordField.getText();

        ClientConfig clientConfig = new ClientConfig();
        clientConfig.register(MultiPartFeature.class);

        SslConfigurator sslConfig = SslConfigurator.newInstance()
                .trustStoreFile(SECURITY_DIRECTORY_PATH + "device")
                .trustStorePassword("123456")
                .keyStoreFile(SECURITY_DIRECTORY_PATH + "device")
                .keyPassword("123456");

        SSLContext sslContext = sslConfig.createSSLContext();
        Client client = ClientBuilder.newBuilder().sslContext(sslContext).build();

        Response response;
        Invocation.Builder invocationBuilder;
        int answer;

        genKeyPair(username, password);

        final FileDataBodyPart filePart = new FileDataBodyPart("file",
                new File(SECURITY_DIRECTORY_PATH + username + ".csr"));
        FormDataMultiPart formDataMultiPart = new FormDataMultiPart();
        final FormDataMultiPart multipart = (FormDataMultiPart) formDataMultiPart
                .bodyPart(filePart);

        WebTarget target = client.target(CA_CERTREQ_ADDRESS);
        response = target.request().post(Entity.entity(multipart, multipart.getMediaType()));

        System.out.println(response.getStatus());
        answer = response.readEntity(int.class);
        System.out.println(answer);

        if (response.getStatus() == 200 && answer == REQUEST_SUCCESSS) {

            try {
                System.out.println("ENTROU");
                target = client.target(CA_DOWNCERT_ADDRESS + username);

                invocationBuilder
                        = target.request(MediaType.APPLICATION_OCTET_STREAM);

                response = invocationBuilder.get();

                writeOwnCert(response);

                target = client.target(CA_DOWNCACERT_ADDRESS);

                invocationBuilder
                        = target.request(MediaType.APPLICATION_OCTET_STREAM);

                response = invocationBuilder.get();

                writeCACert(response);

                formDataMultiPart.close();
                multipart.close();
                client.close();

                TestKeyStore tks = new TestKeyStore();
                tks.importCACert(username, password);
                tks.importCert(username, password);
                System.out.println("CERTIFICADO IMPORTADO COM SUCESSO");

                tks.createTrustStore(username, password);
                System.out.println("TRUSTSTORE CRIADA COM SUCESSO E CERTIFICADO DA CA IMPORTADO COM SUCESSO");

                config.registerUser(username, passwordField.getText());
                System.out.println("USUÁRIO CRIADO COM SUCESSO");
            } catch (IOException ex) {
                Logger.getLogger(AccountCreationPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(PasswordPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println("FALHA AO GERAR CERTIFICADO.");
        }
    }//GEN-LAST:event_continueButtonActionPerformed

    private void writeOwnCert(Response response) {
        String certFilePath = SECURITY_DIRECTORY_PATH + username + ".cer";

        byte[] certBytes = response.readEntity(byte[].class);

        try {
            FileUtils.writeByteArrayToFile(new File(certFilePath), certBytes);
            System.out.println("CERTIFICADO DO USUÁRIO BAIXADO COM SUCESSO");
        } catch (IOException e) {
            System.out.println("CERTIFICADO DO USUÁRIO NÃO ESCRITO NA PASTA");
            e.printStackTrace();
        }
    }

    private void writeCACert(Response response) {
        String certFilePath = SECURITY_DIRECTORY_PATH + "ca-certificate.pem";

        byte[] certBytes = response.readEntity(byte[].class);

        try {
            FileUtils.writeByteArrayToFile(new File(certFilePath), certBytes);
            System.out.println("CERTIFICADO DA CA BAIXADO COM SUCESSO");
        } catch (IOException e) {
            System.out.println("CERTIFICADO DA CA NÃO ESCRITO NA PASTA");
            e.printStackTrace();
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            TestKeyStore tks = new TestKeyStore();

            tks.createTrustStore("client24", "123654");
            //config = new Configuration("device", "123456");
            //config.registerUser("client21", "123456");
            System.out.println("CRIADO!");
        } catch (Exception ex) {
            Logger.getLogger(PasswordPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void genKeyPair(String username, String password) {
        new TestKeyStore().generateKeyPair(username, password);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PasswordPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PasswordPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PasswordPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PasswordPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new PasswordPanel().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(PasswordPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton continueButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField passwordField;
    // End of variables declaration//GEN-END:variables
}
