/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.plataformax.swingui;

import com.plataformax.configuration.Configuration;
import com.plataformax.x509managers.MyX509KeyManager;
import com.plataformax.x509managers.DirectKeyStoreHandler;
import com.sun.org.apache.xml.internal.security.utils.Base64;
import java.awt.event.ActionEvent;
import java.awt.event.WindowEvent;

import java.io.File;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.cert.CertificateEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.SSLContext;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.apache.commons.io.FileUtils;

import org.glassfish.jersey.SslConfigurator;
import org.glassfish.jersey.client.ClientConfig;
import org.glassfish.jersey.media.multipart.FormDataMultiPart;
import org.glassfish.jersey.media.multipart.MultiPartFeature;
import org.glassfish.jersey.media.multipart.file.FileDataBodyPart;
import org.jivesoftware.smack.SmackException;
import org.jivesoftware.smack.XMPPException;

/**
 *
 * @author Mathias
 */
public class LoginFrame extends javax.swing.JFrame {

    private static final String ENTER_KEY = "ENTER";
    private final String SECURITY_DIRECTORY_PATH = "security/";
    private Configuration config;
    private KeyStroke keyStroke;

    /**
     * Creates new form TelaLogin
     *
     * @throws java.lang.Exception
     */
    public LoginFrame() throws Exception {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        usernameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();
        createAccountButton = new javax.swing.JButton();
        ipField = new javax.swing.JTextField();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setAutoscrolls(true);

        jLabel1.setText("Usuário");

        jLabel2.setText("Senha");

        loginButton.setText("Fazer Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        createAccountButton.setText("Criar Conta");
        createAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAccountButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(loginButton)
                        .addGap(18, 18, 18)
                        .addComponent(createAccountButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usernameField, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                            .addComponent(passwordField)
                            .addComponent(ipField))))
                .addContainerGap(114, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ipField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(3, 3, 3)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginButton)
                    .addComponent(createAccountButton))
                .addContainerGap(110, Short.MAX_VALUE))
        );

        keyStroke = KeyStroke.getKeyStroke(ENTER_KEY);
        Object actionKey = passwordField.getInputMap(
            JComponent.WHEN_FOCUSED).get(keyStroke);
        passwordField.getActionMap().put(actionKey, wrapper);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private final Action wrapper = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent ae) {
            loginButton.doClick();
        }
    };


    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        MainFrame tp;
        String username = usernameField.getText();
        String password = passwordField.getText();

        MyX509KeyManager km = checkUsernameAndPassword(username, password);

        //VERIFICA LOGIN E SENHA
        if (km != null) {

            try {
                //TESTA SE O CERTIFICADO DO CLIENTE TENTANDO LOGAR É VÁLIDO
                if (checkOwnCertValidity(km, username)) {

                    config = new Configuration(username, password, ipField.getText());

                    try {
                        tp = new MainFrame(username, password, this.config);
                        tp.setVisible(true);
                        tp.revalidate();
                        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
                    } catch (Exception ex) {
                        Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(rootPane, ex.getMessage());
                        System.out.println("ERRO AO CRIAR TELA PRINCIPAL");
                        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
                    }
                    //SE NÃO, TENTA RENOVAR O CERTIFICADO
                } else {
                    renewCertificate(km, username, password);
                }
            } catch (KeyStoreException ex) {
                JOptionPane.showMessageDialog(rootPane, "Erro ao verificar a válidade do seu certificado.");
                ex.printStackTrace();
            } catch (KeyManagementException ex) {
                Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SmackException ex) {
                JOptionPane.showMessageDialog(rootPane, "Erro ao conectar ao servidor. Servidor está demorando para responder"
                        + ". Favor tentar novamente mais tarde.");
                ex.printStackTrace();
            } catch (IOException ex) {
                Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (XMPPException ex) {
                Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private String signData(String messageToSign, PrivateKey pk) throws NoSuchAlgorithmException,
            InvalidKeyException, SignatureException, Exception {
        Signature sig = Signature.getInstance("SHA256withRSA");
        
        sig.initSign(pk);
        sig.update(messageToSign.getBytes());
        byte[] sign = sig.sign();
        String signatureText = Base64.encode(sign);

        return signatureText;
    }
    
    private void renewCertificate(MyX509KeyManager km, String username, String password) throws KeyStoreException, CertificateEncodingException {
        //TIRAR ISSO PARA PRODUÇÃO, SÓ ESTÁ AQUI PARA PERMITIR CONEXÃO COM LOCALHOST
        //O TLS COMPARA O CN DO CERTIFICADO COM O HOSTNAME O QUAL ESTÁ SE CONECTANDO
        //COMO O CN DO CERTIFICADO DO SERVIDOR NÃO É 'LOCALHOST'
        //VAI DAR PROBLEMA DE 'MATCHING'
        javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier(
                new javax.net.ssl.HostnameVerifier() {

            @Override
            public boolean verify(String hostname,
                    javax.net.ssl.SSLSession sslSession) {
                return true;
            }
        });

        ClientConfig clientConfig = new ClientConfig();
        clientConfig.register(MultiPartFeature.class);

        SslConfigurator sslConfig = SslConfigurator.newInstance()
                .keyStoreFile(SECURITY_DIRECTORY_PATH + username)
                .keyPassword(password)
                .trustStoreFile(SECURITY_DIRECTORY_PATH + username + "Trust")
                .trustStorePassword(password);

        SSLContext sslContext = sslConfig.createSSLContext();
        Client client = ClientBuilder.newBuilder().withConfig(clientConfig)
                .sslContext(sslContext).build();
        Response response;

        new DirectKeyStoreHandler().genCertReq(username, password);

        String serialNumber = null;
        String signature = null;
        try {
            serialNumber = km.getCertificateSerialNumber(username);
            if (serialNumber.length() == 3) {
                serialNumber = "0".concat(serialNumber);
            }
            signature = signData(serialNumber, km.getPrivateKey("1.0."+username));
            System.out.println("SERIAL: " + serialNumber);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao tentar recuperar o número serial"
                    + " do seu certificado, para renová-lo. Seu pedido será enviado, mas "
                    + "será recusado.");
            Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        final FileDataBodyPart requestFile = new FileDataBodyPart("file",
                new File(SECURITY_DIRECTORY_PATH + username + ".csr"));
        FormDataMultiPart formDataMultiPart = new FormDataMultiPart();
        
        String cert = Base64.encode(km.getCertificate(username).getEncoded());
        
        final FormDataMultiPart multipart = (FormDataMultiPart) formDataMultiPart
                .field("serial", serialNumber, MediaType.TEXT_PLAIN_TYPE)
                .field("signature", signature, MediaType.TEXT_PLAIN_TYPE)
                .field("certificate", cert, MediaType.TEXT_PLAIN_TYPE)
                .bodyPart(requestFile);

        WebTarget target = client.target("https://localhost:9998/api/app/renewcert");
        response = target.request().post(Entity.entity(multipart, multipart.getMediaType()));
        
        if (response.getStatus() != 500) {
            System.out.println(response.getStatus());

            writeOwnCert(response, username);

            try {
                formDataMultiPart.close();
                multipart.close();
                client.close();

                new DirectKeyStoreHandler().importCert(username, password);
                System.out.println("CERTIFICADO IMPORTADO COM SUCESSO");
                JOptionPane.showMessageDialog(this, "ATENÇÃO: CERTIFICADO RENOVADO!");
                loginButton.doClick();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(rootPane, "Erro ao tentar importar seu certificado renovado "
                        + "para a sua KeyStore. Você pode tentar importá-lo manualmente");
                System.out.println("FALHA AO RENOVAR CERTIFICADO");
                Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Erro ao renovar seu certificado."
                    + "Não será possível fazer login até que seu certificado seja renovado.");
        }
    }

    //ESCREVE O CERTIFICADO DO CLIENTE NA PASTA DE SEGURANÇA
    private void writeOwnCert(Response response, String username) {
        String certFilePath = SECURITY_DIRECTORY_PATH + username + ".cer";

        byte[] certBytes = response.readEntity(byte[].class);

        try {
            FileUtils.writeByteArrayToFile(new File(certFilePath), certBytes);
            System.out.println("CERTIFICADO DO USUÁRIO BAIXADO COM SUCESSO");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao tentar gravar seu certificado na pasta.");
            System.out.println("CERTIFICADO DO USUÁRIO NÃO ESCRITO NA PASTA");
            e.printStackTrace();
        }
    }

    //VERIFICA A VALIDADE DO CERTIFICADO DO CLIENTE TENTANDO LOGAR
    //RETORNA 'TRUE' SE FOR VÁLIDO
    private boolean checkOwnCertValidity(MyX509KeyManager km, String username) throws KeyStoreException {
        return km.checkValidity(username);
    }

    private MyX509KeyManager checkUsernameAndPassword(String username, String password) {
        try {
            return new MyX509KeyManager(username, password);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Usuário ou senha incorretos!");
            ex.printStackTrace();
            return null;
        }
    }


    private void createAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAccountButtonActionPerformed
        new AccountCreationFrame(ipField.getText()).setVisible(true);
    }//GEN-LAST:event_createAccountButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new LoginFrame().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createAccountButton;
    private javax.swing.JTextField ipField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton loginButton;
    private javax.swing.JTextField passwordField;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables
}
